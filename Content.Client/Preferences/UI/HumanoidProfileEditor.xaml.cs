using System.Linq;
using System.Numerics;
using System.Text;
using Content.Client.Guidebook;
using Content.Client.Humanoid;
using Content.Client.Lobby.UI;
using Content.Client.Message;
using Content.Client.Players.PlayTimeTracking;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Client.UserInterface.Systems.Guidebook;
using Content.Shared.CCVar;
using Content.Shared.Clothing.Loadouts.Prototypes;
using Content.Shared.Clothing.Loadouts.Systems;
using Content.Shared.Customization.Systems;
using Content.Shared.GameTicking;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Markings;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Content.Shared.StatusIcon;
using Content.Shared.Traits;
using Content.Shared._NC; // Nuclear 14
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Configuration;
using Robust.Shared.Enums;
using Robust.Shared.Map;
using Robust.Shared.Physics;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using Robust.Shared.Utility;
using static Robust.Client.UserInterface.Controls.BoxContainer;
using Direction = Robust.Shared.Maths.Direction;

namespace Content.Client.Preferences.UI
{
    public sealed class HighlightedContainer : PanelContainer
    {
        public HighlightedContainer()
        {
            PanelOverride = new StyleBoxFlat()
            {
                BackgroundColor = new Color(47, 47, 53),
                ContentMarginTopOverride = 10,
                ContentMarginBottomOverride = 10,
                ContentMarginLeftOverride = 10,
                ContentMarginRightOverride = 10
            };
        }
    }

    [GenerateTypedNameReferences]
    public sealed partial class HumanoidProfileEditor : Control
    {
        private readonly IClientPreferencesManager _preferencesManager;
        private readonly IEntityManager _entMan;
        private readonly IConfigurationManager _configurationManager;
        private readonly MarkingManager _markingManager;
        private readonly JobRequirementsManager _requirements;
        private readonly CharacterRequirementsSystem _characterRequirementsSystem;
        private readonly LoadoutSystem _loadoutSystem;

        private LineEdit _ageEdit => CAgeEdit;
        private LineEdit _nameEdit => CNameEdit;
        private TextEdit _flavorTextEdit = null!;
        private Button _nameRandomButton => CNameRandomize;
        private Button _randomizeEverythingButton => CRandomizeEverything;
        private RichTextLabel _warningLabel => CWarningLabel;
        private Button _saveButton => CSaveButton;
        private OptionButton _sexButton => CSexButton;
        private OptionButton _genderButton => CPronounsButton;
        private Slider _skinColor => CSkin;
        private OptionButton _clothingButton => CClothingButton;
        private OptionButton _backpackButton => CBackpackButton;
        private OptionButton _spawnPriorityButton => CSpawnPriorityButton;
        private SingleMarkingPicker _hairPicker => CHairStylePicker;
        private SingleMarkingPicker _facialHairPicker => CFacialHairPicker;
        private EyeColorPicker _eyesPicker => CEyeColorPicker;
        private Slider _heightSlider => CHeightSlider;
        private Slider _widthSlider => CWidthSlider;

        private TabContainer _tabContainer => CTabContainer;
        private BoxContainer _jobList => CJobList;
        private BoxContainer _antagList => CAntagList;
        private Label _traitPointsLabel => TraitPointsLabel;
        private int _traitCount;
        private ProgressBar _traitPointsBar => TraitPointsBar;
        private Button _traitsShowUnusableButton => TraitsShowUnusableButton;
        private BoxContainer _traitsTab => CTraitsTab;
        private TabContainer _traitsTabs => CTraitsTabs;
        private Label _loadoutPointsLabel => LoadoutPointsLabel;
        private ProgressBar _loadoutPointsBar => LoadoutPointsBar;
        private Button _loadoutsShowUnusableButton => LoadoutsShowUnusableButton;
        private BoxContainer _loadoutsTab => CLoadoutsTab;
        private TabContainer _loadoutsTabs => CLoadoutsTabs;
        private readonly List<JobPrioritySelector> _jobPriorities;
        private OptionButton _preferenceUnavailableButton => CPreferenceUnavailableButton;
        private readonly Dictionary<string, BoxContainer> _jobCategories;
        // Mildly hacky, as I don't trust prototype order to stay consistent and don't want the UI to break should a new one get added mid-edit. --moony
        private readonly List<SpeciesPrototype> _speciesList;
        private readonly List<AntagPreferenceSelector> _antagPreferences;
        private readonly List<TraitPreferenceSelector> _traitPreferences;
        private readonly List<LoadoutPreferenceSelector> _loadoutPreferences;

        private SpriteView _previewSpriteView => CSpriteView;
        private Button _previewRotateLeftButton => CSpriteRotateLeft;
        private Button _previewRotateRightButton => CSpriteRotateRight;
        private Direction _previewRotation = Direction.North;
        private EntityUid? _previewDummy;

        private BoxContainer _rgbSkinColorContainer => CRgbSkinColorContainer;
        private ColorSelectorSliders _rgbSkinColorSelector;

        private bool _isDirty;
        private bool _needUpdatePreview;
        public int CharacterSlot;
        public HumanoidCharacterProfile? Profile;
        private MarkingSet _markingSet = new(); // storing this here feels iffy but a few things need it this high up

        public event Action<HumanoidCharacterProfile, int>? OnProfileChanged;

        public HumanoidProfileEditor(IClientPreferencesManager preferencesManager, IPrototypeManager prototypeManager,
            IEntityManager entityManager, IConfigurationManager configurationManager)
        {
            RobustXamlLoader.Load(this);
            _prototypeManager = prototypeManager;
            _entMan = entityManager;
            _preferencesManager = preferencesManager;
            _configurationManager = configurationManager;
            _markingManager = IoCManager.Resolve<MarkingManager>();
            _characterRequirementsSystem = EntitySystem.Get<CharacterRequirementsSystem>();
            _loadoutSystem = EntitySystem.Get<LoadoutSystem>();

            SpeciesInfoButton.ToolTip = Loc.GetString("humanoid-profile-editor-guidebook-button-tooltip");

            #region Left

            #region Randomize

            #endregion Randomize

            #region Name

            _nameEdit.OnTextChanged += args => { SetName(args.Text); };
            _nameRandomButton.OnPressed += args => RandomizeName();
            _randomizeEverythingButton.OnPressed += args => { RandomizeEverything(); };
            _warningLabel.SetMarkup($"[color=red]{Loc.GetString("humanoid-profile-editor-naming-rules-warning")}[/color]");

            #endregion Name

            #region Appearance

            _tabContainer.SetTabTitle(0, Loc.GetString("humanoid-profile-editor-appearance-tab"));

            ShowClothes.OnPressed += ToggleClothes;
            ShowLoadouts.OnPressed += ToggleClothes;

            #region Sex

            _sexButton.OnItemSelected += args =>
            {
                _sexButton.SelectId(args.Id);
                SetSex((Sex) args.Id);
            };

            #endregion Sex

            #region Age

            _ageEdit.OnTextChanged += args =>
            {
                if (!int.TryParse(args.Text, out var newAge))
                    return;
                SetAge(newAge);
            };

            #endregion Age

            #region Gender

            _genderButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-male-text"), (int) Gender.Male);
            _genderButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-female-text"), (int) Gender.Female);
            _genderButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-epicene-text"), (int) Gender.Epicene);
            _genderButton.AddItem(Loc.GetString("humanoid-profile-editor-pronouns-neuter-text"), (int) Gender.Neuter);

            _genderButton.OnItemSelected += args =>
            {
                _genderButton.SelectId(args.Id);
                SetGender((Gender) args.Id);
            };

            #endregion Gender

            #region Species

            _speciesList = prototypeManager.EnumeratePrototypes<SpeciesPrototype>().Where(o => o.RoundStart).ToList();
            for (var i = 0; i < _speciesList.Count; i++)
            {
                var name = Loc.GetString(_speciesList[i].Name);
                CSpeciesButton.AddItem(name, i);
            }

            CSpeciesButton.OnItemSelected += args =>
            {
                CSpeciesButton.SelectId(args.Id);
                SetSpecies(_speciesList[args.Id].ID);
                UpdateHairPickers();
                OnSkinColorOnValueChanged();
            };

            #endregion Species

            #region Height

            var prototype = _speciesList.Find(x => x.ID == Profile?.Species) ?? _speciesList.First();

            _heightSlider.MinValue = prototype.MinHeight;
            _heightSlider.MaxValue = prototype.MaxHeight;
            _heightSlider.Value = Profile?.Height ?? prototype.DefaultHeight;
            var height = MathF.Round(prototype.AverageHeight * _heightSlider.Value);
            CHeightLabel.Text = Loc.GetString("humanoid-profile-editor-height-label", ("height", (int) height));

            _heightSlider.OnValueChanged += args =>
            {
                if (Profile is null)
                    return;

                prototype = _speciesList.Find(x => x.ID == Profile.Species) ?? _speciesList.First(); // Just in case

                var value = Math.Clamp(args.Value, prototype.MinHeight, prototype.MaxHeight);
                var height = MathF.Round(prototype.AverageHeight * value);
                CHeightLabel.Text = Loc.GetString("humanoid-profile-editor-height-label", ("height", (int) height));
                SetProfileHeight(value);
                UpdateWeight();
            };

            CHeightReset.OnPressed += _ =>
            {
                _heightSlider.Value = prototype.DefaultHeight;
                SetProfileHeight(prototype.DefaultHeight);
                UpdateWeight();
            };


            _widthSlider.MinValue = prototype.MinWidth;
            _widthSlider.MaxValue = prototype.MaxWidth;
            _widthSlider.Value = Profile?.Width ?? prototype.DefaultWidth;
            var width = MathF.Round(prototype.AverageWidth * _widthSlider.Value);
            CWidthLabel.Text = Loc.GetString("humanoid-profile-editor-width-label", ("width", width));

            _widthSlider.OnValueChanged += args =>
            {
                if (Profile is null)
                    return;

                prototype = _speciesList.Find(x => x.ID == Profile.Species) ?? _speciesList.First(); // Just in case

                var value = Math.Clamp(args.Value, prototype.MinWidth, prototype.MaxWidth);
                var width = MathF.Round(prototype.AverageWidth * value);
                CWidthLabel.Text = Loc.GetString("humanoid-profile-editor-width-label", ("width", width));
                SetProfileWidth(value);
                UpdateWeight();
            };

            CWidthReset.OnPressed += _ =>
            {
                _widthSlider.Value = prototype.DefaultWidth;
                SetProfileWidth(prototype.DefaultWidth);
                UpdateWeight();
            };

            prototypeManager.Index(prototype.Prototype).TryGetComponent<FixturesComponent>(out var fixture);
            if (fixture != null)
            {
                var radius = fixture.Fixtures["fix1"].Shape.Radius;
                var density = fixture.Fixtures["fix1"].Density;
                var avg = (_widthSlider.Value + _heightSlider.Value) / 2;
                var weight = MathF.Round(MathF.PI * MathF.Pow(radius * avg, 2) * density);
                CWeightLabel.Text = Loc.GetString("humanoid-profile-editor-weight-label", ("weight", (int) weight));
            }
            else
            {
                // Whelp, the fixture doesn't exist, guesstimate it instead
                CWeightLabel.Text = Loc.GetString("humanoid-profile-editor-weight-label", ("weight", (int) 71));
            }

            #endregion Height

            #region Skin


            _skinColor.OnValueChanged += _ =>
            {
                OnSkinColorOnValueChanged();
            };

            _rgbSkinColorContainer.AddChild(_rgbSkinColorSelector = new ColorSelectorSliders());
            _rgbSkinColorSelector.OnColorChanged += _ =>
            {
                OnSkinColorOnValueChanged();
            };

            #endregion

            #region Hair

            _hairPicker.OnMarkingSelect += newStyle =>
            {
                if (Profile is null)
                    return;
                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithHairStyleName(newStyle.id));
                IsDirty = true;
            };

            _hairPicker.OnColorChanged += newColor =>
            {
                if (Profile is null)
                    return;
                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithHairColor(newColor.marking.MarkingColors[0]));
                UpdateCMarkingsHair();
                IsDirty = true;
            };

            _facialHairPicker.OnMarkingSelect += newStyle =>
            {
                if (Profile is null)
                    return;
                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithFacialHairStyleName(newStyle.id));
                IsDirty = true;
            };

            _facialHairPicker.OnColorChanged += newColor =>
            {
                if (Profile is null)
                    return;
                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithFacialHairColor(newColor.marking.MarkingColors[0]));
                UpdateCMarkingsFacialHair();
                IsDirty = true;
            };

            _hairPicker.OnSlotRemove += _ =>
            {
                if (Profile is null)
                    return;
                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithHairStyleName(HairStyles.DefaultHairStyle)
                );
                UpdateHairPickers();
                UpdateCMarkingsHair();
                IsDirty = true;
            };

            _facialHairPicker.OnSlotRemove += _ =>
            {
                if (Profile is null)
                    return;
                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithFacialHairStyleName(HairStyles.DefaultFacialHairStyle)
                );
                UpdateHairPickers();
                UpdateCMarkingsFacialHair();
                IsDirty = true;
            };

            _hairPicker.OnSlotAdd += delegate()
            {
                if (Profile is null)
                    return;

                var hair = _markingManager.MarkingsByCategoryAndSpecies(MarkingCategories.Hair, Profile.Species).Keys
                    .FirstOrDefault();

                if (string.IsNullOrEmpty(hair))
                    return;

                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithHairStyleName(hair)
                );

                UpdateHairPickers();
                UpdateCMarkingsHair();
                IsDirty = true;
            };

            _facialHairPicker.OnSlotAdd += delegate()
            {
                if (Profile is null)
                    return;

                var hair = _markingManager.MarkingsByCategoryAndSpecies(MarkingCategories.FacialHair, Profile.Species).Keys
                    .FirstOrDefault();

                if (string.IsNullOrEmpty(hair))
                    return;

                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithFacialHairStyleName(hair)
                );

                UpdateHairPickers();
                UpdateCMarkingsFacialHair();
                IsDirty = true;
            };

            #endregion Hair

            #region Clothing

            _clothingButton.AddItem(Loc.GetString("humanoid-profile-editor-preference-jumpsuit"), (int) ClothingPreference.Jumpsuit);
            _clothingButton.AddItem(Loc.GetString("humanoid-profile-editor-preference-jumpskirt"), (int) ClothingPreference.Jumpskirt);

            _clothingButton.OnItemSelected += args =>
            {
                _clothingButton.SelectId(args.Id);
                SetClothing((ClothingPreference) args.Id);
            };

            #endregion Clothing

            #region Backpack

            _backpackButton.AddItem(Loc.GetString("humanoid-profile-editor-preference-backpack"), (int) BackpackPreference.Backpack);
            _backpackButton.AddItem(Loc.GetString("humanoid-profile-editor-preference-satchel"), (int) BackpackPreference.Satchel);
            _backpackButton.AddItem(Loc.GetString("humanoid-profile-editor-preference-duffelbag"), (int) BackpackPreference.Duffelbag);

            _backpackButton.OnItemSelected += args =>
            {
                _backpackButton.SelectId(args.Id);
                SetBackpack((BackpackPreference) args.Id);
            };

            #endregion Backpack

            #region SpawnPriority

            foreach (var value in Enum.GetValues<SpawnPriorityPreference>())
            {
                _spawnPriorityButton.AddItem(Loc.GetString($"humanoid-profile-editor-preference-spawn-priority-{value.ToString().ToLower()}"), (int) value);
            }

            _spawnPriorityButton.OnItemSelected += args =>
            {
                _spawnPriorityButton.SelectId(args.Id);
                SetSpawnPriority((SpawnPriorityPreference) args.Id);
            };

            #endregion SpawnPriority

            #region Eyes

            _eyesPicker.OnEyeColorPicked += newColor =>
            {
                if (Profile is null)
                    return;
                Profile = Profile.WithCharacterAppearance(
                    Profile.Appearance.WithEyeColor(newColor));
                CMarkings.CurrentEyeColor = Profile.Appearance.EyeColor;
                IsDirty = true;
            };

            #endregion Eyes

            #endregion Appearance

            #region Jobs

            _tabContainer.SetTabTitle(1, Loc.GetString("humanoid-profile-editor-jobs-tab"));

            _preferenceUnavailableButton.AddItem(
                Loc.GetString("humanoid-profile-editor-preference-unavailable-stay-in-lobby-button"),
                (int) PreferenceUnavailableMode.StayInLobby);
            _preferenceUnavailableButton.AddItem(
                Loc.GetString("humanoid-profile-editor-preference-unavailable-spawn-as-overflow-button",
                              ("overflowJob", Loc.GetString(SharedGameTicker.FallbackOverflowJobName))),
                (int) PreferenceUnavailableMode.SpawnAsOverflow);

            _preferenceUnavailableButton.OnItemSelected += args =>
            {
                _preferenceUnavailableButton.SelectId(args.Id);

                Profile = Profile?.WithPreferenceUnavailable((PreferenceUnavailableMode) args.Id);
                IsDirty = true;
            };

            _jobPriorities = new List<JobPrioritySelector>();
            _jobCategories = new Dictionary<string, BoxContainer>();
            _requirements = IoCManager.Resolve<JobRequirementsManager>();
            _requirements.Updated += UpdateRoleRequirements;
            UpdateRoleRequirements();

            #endregion Jobs

            #region Antags

            _tabContainer.SetTabTitle(2, Loc.GetString("humanoid-profile-editor-antags-tab"));

            _antagPreferences = new List<AntagPreferenceSelector>();

            foreach (var antag in prototypeManager.EnumeratePrototypes<AntagPrototype>().OrderBy(a => Loc.GetString(a.Name)))
            {
                if (!antag.SetPreference)
                    continue;

                var selector = new AntagPreferenceSelector(antag);
                _antagList.AddChild(selector);
                _antagPreferences.Add(selector);
                if (selector.Disabled)
                {
                    Profile = Profile?.WithAntagPreference(antag.ID, false);
                    IsDirty = true;
                }

                selector.PreferenceChanged += preference =>
                {
                    Profile = Profile?.WithAntagPreference(antag.ID, preference);
                    IsDirty = true;
                };
            }

            #endregion Antags

            #region Traits

            // Set up the traits tab
            _tabContainer.SetTabTitle(3, Loc.GetString("humanoid-profile-editor-traits-tab"));
            _traitPreferences = new List<TraitPreferenceSelector>();

            // Show/Hide the traits tab if they ever get enabled/disabled
            var traitsEnabled = _configurationManager.GetCVar(CCVars.GameTraitsEnabled);
            _tabContainer.SetTabVisible(3, traitsEnabled);
            _configurationManager.OnValueChanged(CCVars.GameTraitsEnabled,
                enabled => _tabContainer.SetTabVisible(3, enabled));

            _traitsShowUnusableButton.OnToggled += args => UpdateTraits(args.Pressed);

            UpdateTraits(false);

            #endregion

            #region Loadouts

            // Set up the loadouts tab
            _tabContainer.SetTabTitle(4, Loc.GetString("humanoid-profile-editor-loadouts-tab"));
            _loadoutPreferences = new List<LoadoutPreferenceSelector>();

            // Show/Hide the loadouts tab if they ever get enabled/disabled
            var loadoutsEnabled = _configurationManager.GetCVar(CCVars.GameLoadoutsEnabled);
            _tabContainer.SetTabVisible(4, loadoutsEnabled);
            ShowLoadouts.Visible = loadoutsEnabled;
            _configurationManager.OnValueChanged(CCVars.GameLoadoutsEnabled,
                enabled => LoadoutsChanged(enabled));

            _loadoutsShowUnusableButton.OnToggled += args => UpdateLoadouts(args.Pressed);

            UpdateLoadouts(false);

            #endregion

            #region Save

            _saveButton.OnPressed += _ => { Save(); };

            #endregion Save

            #region Markings
            _tabContainer.SetTabTitle(5, Loc.GetString("humanoid-profile-editor-markings-tab"));

            CMarkings.OnMarkingAdded += OnMarkingChange;
            CMarkings.OnMarkingRemoved += OnMarkingChange;
            CMarkings.OnMarkingColorChange += OnMarkingChange;
            CMarkings.OnMarkingRankChange += OnMarkingChange;

            #endregion Markings

            #region FlavorText

            if (_configurationManager.GetCVar(CCVars.FlavorText))
            {
                var flavorText = new FlavorText.FlavorText();
                _tabContainer.AddChild(flavorText);
                _tabContainer.SetTabTitle(_tabContainer.ChildCount - 1, Loc.GetString("humanoid-profile-editor-flavortext-tab"));
                _flavorTextEdit = flavorText.CFlavorTextInput;

                flavorText.OnFlavorTextChanged += OnFlavorTextChange;
            }

            #endregion FlavorText

            #region Dummy

            _previewRotateLeftButton.OnPressed += _ =>
            {
                _previewRotation = _previewRotation.TurnCw();
                _needUpdatePreview = true;
            };
            _previewRotateRightButton.OnPressed += _ =>
            {
                _previewRotation = _previewRotation.TurnCcw();
                _needUpdatePreview = true;
            };

            var species = Profile?.Species ?? SharedHumanoidAppearanceSystem.DefaultSpecies;
            var dollProto = _prototypeManager.Index<SpeciesPrototype>(species).DollPrototype;

            if (_previewDummy != null)
                _entMan.DeleteEntity(_previewDummy!.Value);

            _previewDummy = _entMan.SpawnEntity(dollProto, MapCoordinates.Nullspace);
            _previewSpriteView.SetEntity(_previewDummy);

            #endregion Dummy

            #endregion Left

            if (preferencesManager.ServerDataLoaded)
            {
                LoadServerData();
            }

            preferencesManager.OnServerDataLoaded += LoadServerData;

            SpeciesInfoButton.OnPressed += OnSpeciesInfoButtonPressed;

            UpdateSpeciesGuidebookIcon();

            IsDirty = false;
        }


        private void LoadoutsChanged(bool enabled)
        {
            _tabContainer.SetTabVisible(4, enabled);
            ShowLoadouts.Visible = enabled;
        }

        private void OnSpeciesInfoButtonPressed(BaseButton.ButtonEventArgs args)
        {
            var guidebookController = UserInterfaceManager.GetUIController<GuidebookUIController>();
            var species = Profile?.Species ?? SharedHumanoidAppearanceSystem.DefaultSpecies;
            var page = "Species";
            if (_prototypeManager.HasIndex<GuideEntryPrototype>(species))
                page = species;

            if (_prototypeManager.TryIndex<GuideEntryPrototype>("Species", out var guideRoot))
            {
                var dict = new Dictionary<string, GuideEntry>();
                dict.Add("Species", guideRoot);
                //TODO: Don't close the guidebook if its already open, just go to the correct page
                guidebookController.ToggleGuidebook(dict, includeChildren:true, selected: page);
            }
        }

        private void ToggleClothes(BaseButton.ButtonEventArgs obj)
        {
            RebuildSpriteView();
        }

        private void UpdateRoleRequirements()
        {
            _jobList.DisposeAllChildren();
            _jobPriorities.Clear();
            _jobCategories.Clear();
            var firstCategory = true;

            var departments = _prototypeManager.EnumeratePrototypes<DepartmentPrototype>().ToArray();
            Array.Sort(departments, DepartmentUIComparer.Instance);

            foreach (var department in departments)
            {
                var departmentName = Loc.GetString($"department-{department.ID}");

                if (!_jobCategories.TryGetValue(department.ID, out var category))
                {
                    category = new BoxContainer
                    {
                        Orientation = LayoutOrientation.Vertical,
                        Name = department.ID,
                        ToolTip = Loc.GetString("humanoid-profile-editor-jobs-amount-in-department-tooltip",
                            ("departmentName", departmentName))
                    };

                    if (firstCategory)
                    {
                        firstCategory = false;
                    }
                    else
                    {
                        category.AddChild(new Control
                        {
                            MinSize = new Vector2(0, 23),
                        });
                    }

                    category.AddChild(new PanelContainer
                    {
                        PanelOverride = new StyleBoxFlat {BackgroundColor = Color.FromHex("#464966")},
                        Children =
                        {
                            new Label
                            {
                                Text = Loc.GetString("humanoid-profile-editor-department-jobs-label",
                                    ("departmentName", departmentName)),
                                Margin = new Thickness(5f, 0, 0, 0)
                            }
                        }
                    });

                    _jobCategories[department.ID] = category;
                    _jobList.AddChild(category);
                }

                var jobs = department.Roles.Select(jobId => _prototypeManager.Index<JobPrototype>(jobId))
                    .Where(job => job.SetPreference)
                    .ToArray();
                Array.Sort(jobs, JobUIComparer.Instance);

                foreach (var job in jobs)
                {
                    var selector = new JobPrioritySelector(job, _prototypeManager);

                    if (!_requirements.IsAllowed(job, out var reason))
                    {
                        selector.LockRequirements(reason);
                    }

                    category.AddChild(selector);
                    _jobPriorities.Add(selector);
                    EnsureJobRequirementsValid(); // DeltaV

                    selector.PriorityChanged += priority =>
                    {
                        Profile = Profile?.WithJobPriority(job.ID, priority);
                        IsDirty = true;

                        foreach (var jobSelector in _jobPriorities)
                        {
                            // Sync other selectors with the same job in case of multiple department jobs
                            if (jobSelector.Proto == selector.Proto)
                            {
                                jobSelector.Priority = priority;
                            }
                            else if (priority == JobPriority.High && jobSelector.Priority == JobPriority.High)
                            {
                                // Lower any other high priorities to medium.
                                jobSelector.Priority = JobPriority.Medium;
                                Profile = Profile?.WithJobPriority(jobSelector.Proto.ID, JobPriority.Medium);
                            }
                        }
                    };

                }
            }

            if (Profile is not null)
            {
                UpdateJobPriorities();
            }
        }

        /// <summary>
        /// DeltaV - Make sure that no invalid job priorities get through.
        /// </summary>
        private void EnsureJobRequirementsValid()
        {
            var changed = false;
            foreach (var selector in _jobPriorities)
            {
                if (_requirements.IsAllowed(selector.Proto, out var _) || selector.Priority == JobPriority.Never)
                    continue;

                selector.Priority = JobPriority.Never;
                Profile = Profile?.WithJobPriority(selector.Proto.ID, JobPriority.Never);
                changed = true;
            }
            if (!changed)
                return;

            _needUpdatePreview = true;
            Save();
        }

        private void OnFlavorTextChange(string content)
        {
            if (Profile is null)
                return;

            Profile = Profile.WithFlavorText(content);
            IsDirty = true;
        }

        private void OnMarkingChange(MarkingSet markings)
        {
            if (Profile is null)
                return;

            Profile = Profile.WithCharacterAppearance(Profile.Appearance.WithMarkings(markings.GetForwardEnumerator().ToList()));
            _needUpdatePreview = true;
            IsDirty = true;
        }

        private void OnMarkingColorChange(List<Marking> markings)
        {
            if (Profile is null)
                return;

            Profile = Profile.WithCharacterAppearance(Profile.Appearance.WithMarkings(markings));
            IsDirty = true;
        }


        private void OnSkinColorOnValueChanged()
        {
            if (Profile is null) return;

            var skin = _prototypeManager.Index<SpeciesPrototype>(Profile.Species).SkinColoration;

            var skinColor = _prototypeManager.Index<SpeciesPrototype>(Profile.Species).DefaultSkinTone;

            switch (skin)
            {
                case HumanoidSkinColor.HumanToned:
                {
                    if (!_skinColor.Visible)
                    {
                        _skinColor.Visible = true;
                        _rgbSkinColorContainer.Visible = false;
                    }

                    var color = SkinColor.HumanSkinTone((int) _skinColor.Value);

                    CMarkings.CurrentSkinColor = color;
                    Profile = Profile.WithCharacterAppearance(Profile.Appearance.WithSkinColor(color));//
                    break;
                }
                case HumanoidSkinColor.Hues:
                {
                    if (!_rgbSkinColorContainer.Visible)
                    {
                        _skinColor.Visible = false;
                        _rgbSkinColorContainer.Visible = true;
                    }

                    CMarkings.CurrentSkinColor = _rgbSkinColorSelector.Color;
                    Profile = Profile.WithCharacterAppearance(Profile.Appearance.WithSkinColor(_rgbSkinColorSelector.Color));
                    break;
                }
                case HumanoidSkinColor.TintedHues:
                case HumanoidSkinColor.TintedHuesSkin: // DeltaV - Tone blending
                {
                    if (!_rgbSkinColorContainer.Visible)
                    {
                        _skinColor.Visible = false;
                        _rgbSkinColorContainer.Visible = true;
                    }

                    var color = skin switch // DeltaV - Tone blending
                    {
                        HumanoidSkinColor.TintedHues => SkinColor.TintedHues(_rgbSkinColorSelector.Color),
                        HumanoidSkinColor.TintedHuesSkin => SkinColor.TintedHuesSkin(_rgbSkinColorSelector.Color, skinColor),
                        _ => Color.White
                    };

                    CMarkings.CurrentSkinColor = color;
                    Profile = Profile.WithCharacterAppearance(Profile.Appearance.WithSkinColor(color));
                    break;
                }
            }

            IsDirty = true;
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
            if (!disposing)
                return;

            if (_previewDummy != null)
                _entMan.DeleteEntity(_previewDummy.Value);

            _requirements.Updated -= UpdateRoleRequirements;
            _preferencesManager.OnServerDataLoaded -= LoadServerData;

            _configurationManager.UnsubValueChanged(CCVars.GameLoadoutsEnabled, enabled => LoadoutsChanged(enabled));
        }

        private void RebuildSpriteView()
        {
            var species = Profile?.Species ?? SharedHumanoidAppearanceSystem.DefaultSpecies;
            var dollProto = _prototypeManager.Index<SpeciesPrototype>(species).DollPrototype;

            if (_previewDummy != null)
                _entMan.DeleteEntity(_previewDummy!.Value);

            _previewDummy = _entMan.SpawnEntity(dollProto, MapCoordinates.Nullspace);
            _previewSpriteView.SetEntity(_previewDummy);
            _needUpdatePreview = true;
        }

        private void LoadServerData()
        {
            Profile = (HumanoidCharacterProfile) _preferencesManager.Preferences!.SelectedCharacter;
            CharacterSlot = _preferencesManager.Preferences.SelectedCharacterIndex;

            UpdateControls();
            EnsureJobRequirementsValid(); // DeltaV
            _needUpdatePreview = true;
        }

        private void SetAge(int newAge)
        {
            Profile = Profile?.WithAge(newAge);
            IsDirty = true;
        }

        private void SetSex(Sex newSex)
        {
            Profile = Profile?.WithSex(newSex);
            // for convenience, default to most common gender when new sex is selected
            switch (newSex)
            {
                case Sex.Male:
                    Profile = Profile?.WithGender(Gender.Male);
                    break;
                case Sex.Female:
                    Profile = Profile?.WithGender(Gender.Female);
                    break;
                default:
                    Profile = Profile?.WithGender(Gender.Epicene);
                    break;
            }
            UpdateGenderControls();
            CMarkings.SetSex(newSex);
            IsDirty = true;
        }

        private void SetGender(Gender newGender)
        {
            Profile = Profile?.WithGender(newGender);
            IsDirty = true;
        }

        private void SetSpecies(string newSpecies)
        {
            Profile = Profile?.WithSpecies(newSpecies);
			Save(); // Nuclear 14
            OnSkinColorOnValueChanged(); // Species may have special color prefs, make sure to update it.
            CMarkings.SetSpecies(newSpecies); // Repopulate the markings tab as well.
            UpdateSexControls(); // update sex for new species
            // Changing species provides inaccurate sliders without these
            UpdateHeightControls();
            UpdateWidthControls();
            UpdateWeight();
            RebuildSpriteView(); // they might have different inv so we need a new dummy
			UpdateJobPriorities(); // Nuclear 14
            UpdateSpeciesGuidebookIcon();
            IsDirty = true;
            _needUpdatePreview = true;
        }

        private void SetName(string newName)
        {
            Profile = Profile?.WithName(newName);
            IsDirty = true;
        }

        private void SetClothing(ClothingPreference newClothing)
        {
            Profile = Profile?.WithClothingPreference(newClothing);
            IsDirty = true;
        }

        private void SetBackpack(BackpackPreference newBackpack)
        {
            Profile = Profile?.WithBackpackPreference(newBackpack);
            IsDirty = true;
        }

        private void SetSpawnPriority(SpawnPriorityPreference newSpawnPriority)
        {
            Profile = Profile?.WithSpawnPriorityPreference(newSpawnPriority);
            IsDirty = true;
        }

        private void SetProfileHeight(float height)
        {
            Profile = Profile?.WithHeight(height);
            IsDirty = true;
        }

        private void SetProfileWidth(float width)
        {
            Profile = Profile?.WithWidth(width);
            IsDirty = true;
        }

        public void Save()
        {
            IsDirty = false;

            if (Profile != null)
            {
                _preferencesManager.UpdateCharacter(Profile, CharacterSlot);
                OnProfileChanged?.Invoke(Profile, CharacterSlot);
                _needUpdatePreview = true;
            }
        }

        private bool IsDirty
        {
            get => _isDirty;
            set
            {
                _isDirty = value;
                _needUpdatePreview = true;
                UpdateSaveButton();
            }
        }

        private void UpdateNameEdit()
        {
            _nameEdit.Text = Profile?.Name ?? "";
        }

        private void UpdateFlavorTextEdit()
        {
            if(_flavorTextEdit != null)
            {
                _flavorTextEdit.TextRope = new Rope.Leaf(Profile?.FlavorText ?? "");
            }
        }

        private void UpdateAgeEdit()
        {
            _ageEdit.Text = Profile?.Age.ToString() ?? "";
        }

        private void UpdateSexControls()
        {
            if (Profile == null)
                return;

            _sexButton.Clear();

            var sexes = new List<Sex>();

            // add species sex options, default to just none if we are in bizzaro world and have no species
            if (_prototypeManager.TryIndex<SpeciesPrototype>(Profile.Species, out var speciesProto))
            {
                foreach (var sex in speciesProto.Sexes)
                {
                    sexes.Add(sex);
                }
            } else
            {
                sexes.Add(Sex.Unsexed);
            }

            // add button for each sex
            foreach (var sex in sexes)
            {
                _sexButton.AddItem(Loc.GetString($"humanoid-profile-editor-sex-{sex.ToString().ToLower()}-text"), (int) sex);
            }

            if (sexes.Contains(Profile.Sex))
                _sexButton.SelectId((int) Profile.Sex);
            else
                _sexButton.SelectId((int) sexes[0]);
        }

        private void UpdateSkinColor()
        {
            if (Profile == null)
                return;

            var skin = _prototypeManager.Index<SpeciesPrototype>(Profile.Species).SkinColoration;

            switch (skin)
            {
                case HumanoidSkinColor.HumanToned:
                {
                    if (!_skinColor.Visible)
                    {
                        _skinColor.Visible = true;
                        _rgbSkinColorContainer.Visible = false;
                    }

                    _skinColor.Value = SkinColor.HumanSkinToneFromColor(Profile.Appearance.SkinColor);

                    break;
                }
                case HumanoidSkinColor.Hues:
                {
                    if (!_rgbSkinColorContainer.Visible)
                    {
                        _skinColor.Visible = false;
                        _rgbSkinColorContainer.Visible = true;
                    }

                    // set the RGB values to the direct values otherwise
                    _rgbSkinColorSelector.Color = Profile.Appearance.SkinColor;
                    break;
                }
                case HumanoidSkinColor.TintedHues:
                {
                    if (!_rgbSkinColorContainer.Visible)
                    {
                        _skinColor.Visible = false;
                        _rgbSkinColorContainer.Visible = true;
                    }

                    // set the RGB values to the direct values otherwise
                    _rgbSkinColorSelector.Color = Profile.Appearance.SkinColor;
                    break;
                }
            }

        }

        public void UpdateSpeciesGuidebookIcon()
        {
            SpeciesInfoButton.StyleClasses.Clear();

            var species = Profile?.Species;
            if (species is null)
                return;

            if (!_prototypeManager.TryIndex<SpeciesPrototype>(species, out var speciesProto))
                return;

            // Don't display the info button if no guide entry is found
            if (!_prototypeManager.HasIndex<GuideEntryPrototype>(species))
                return;

            var style = speciesProto.GuideBookIcon;
            SpeciesInfoButton.StyleClasses.Add(style);
        }

        private void UpdateMarkings()
        {
            if (Profile == null)
            {
                return;
            }

            CMarkings.SetData(Profile.Appearance.Markings, Profile.Species,
                Profile.Sex, Profile.Appearance.SkinColor, Profile.Appearance.EyeColor
            );
        }

        private void UpdateSpecies()
        {
            if (Profile == null)
            {
                return;
            }

            CSpeciesButton.Select(_speciesList.FindIndex(x => x.ID == Profile.Species));
        }

        private void UpdateGenderControls()
        {
            if (Profile == null)
            {
                return;
            }

            _genderButton.SelectId((int) Profile.Gender);
        }

        private void UpdateClothingControls()
        {
            if (Profile == null)
            {
                return;
            }

            _clothingButton.SelectId((int) Profile.Clothing);
        }

        private void UpdateBackpackControls()
        {
            if (Profile == null)
            {
                return;
            }

            _backpackButton.SelectId((int) Profile.Backpack);
        }

        private void UpdateSpawnPriorityControls()
        {
            if (Profile == null)
            {
                return;
            }

            _spawnPriorityButton.SelectId((int) Profile.SpawnPriority);
        }

        private void UpdateHeightControls()
        {
            if (Profile == null)
                return;

            var species = _speciesList.Find(x => x.ID == Profile.Species) ?? _speciesList.First();

            _heightSlider.MinValue = species.MinHeight;
            _heightSlider.Value = Profile.Height;
            _heightSlider.MaxValue = species.MaxHeight;

            var height = MathF.Round(species.AverageHeight * _heightSlider.Value);
            CHeightLabel.Text = Loc.GetString("humanoid-profile-editor-height-label", ("height", (int) height));
        }

        private void UpdateWidthControls()
        {
            if (Profile == null)
                return;

            var species = _speciesList.Find(x => x.ID == Profile.Species) ?? _speciesList.First();

            _widthSlider.MinValue = species.MinWidth;
            _widthSlider.Value = Profile.Width;
            _widthSlider.MaxValue = species.MaxWidth;

            var width = MathF.Round(species.AverageWidth * _widthSlider.Value);
            CWidthLabel.Text = Loc.GetString("humanoid-profile-editor-width-label", ("width", (int) width));
        }

        private void UpdateWeight()
        {
            if (Profile == null)
                return;

            var species = _speciesList.Find(x => x.ID == Profile.Species) ?? _speciesList.First();
            _prototypeManager.Index(species.Prototype).TryGetComponent<FixturesComponent>(out var fixture);

            if (fixture != null)
            {
                var radius = fixture.Fixtures["fix1"].Shape.Radius;
                var density = fixture.Fixtures["fix1"].Density;
                var avg = (Profile.Width + Profile.Height) / 2;
                var weight = MathF.Round(MathF.PI * MathF.Pow(radius * avg, 2) * density);
                CWeightLabel.Text = Loc.GetString("humanoid-profile-editor-weight-label", ("weight", (int) weight));
            }

            _previewSpriteView.InvalidateMeasure();
        }

        private void UpdateHairPickers()
        {
            if (Profile == null)
            {
                return;
            }
            var hairMarking = Profile.Appearance.HairStyleId switch
            {
                HairStyles.DefaultHairStyle => new List<Marking>(),
                _ => new() { new(Profile.Appearance.HairStyleId, new List<Color>() { Profile.Appearance.HairColor }) },
            };

            var facialHairMarking = Profile.Appearance.FacialHairStyleId switch
            {
                HairStyles.DefaultFacialHairStyle => new List<Marking>(),
                _ => new() { new(Profile.Appearance.FacialHairStyleId, new List<Color>() { Profile.Appearance.FacialHairColor }) },
            };

            _hairPicker.UpdateData(
                hairMarking,
                Profile.Species,
                1);
            _facialHairPicker.UpdateData(
                facialHairMarking,
                Profile.Species,
                1);
        }

        private void UpdateCMarkingsHair()
        {
            if (Profile == null)
            {
                return;
            }

            // hair color
            Color? hairColor = null;
            if ( Profile.Appearance.HairStyleId != HairStyles.DefaultHairStyle &&
                _markingManager.Markings.TryGetValue(Profile.Appearance.HairStyleId, out var hairProto)
            )
            {
                if (_markingManager.CanBeApplied(Profile.Species, Profile.Sex, hairProto, _prototypeManager))
                {
                    if (_markingManager.MustMatchSkin(Profile.Species, HumanoidVisualLayers.Hair, out var _, _prototypeManager))
                    {
                        hairColor = Profile.Appearance.SkinColor;
                    }
                    else
                    {
                        hairColor = Profile.Appearance.HairColor;
                    }
                }
            }
            if (hairColor != null)
            {
                CMarkings.HairMarking = new (Profile.Appearance.HairStyleId, new List<Color>() { hairColor.Value });
            }
            else
            {
                CMarkings.HairMarking = null;
            }
        }

        private void UpdateCMarkingsFacialHair()
        {
            if (Profile == null)
            {
                return;
            }

            // facial hair color
            Color? facialHairColor = null;
            if ( Profile.Appearance.FacialHairStyleId != HairStyles.DefaultFacialHairStyle &&
                _markingManager.Markings.TryGetValue(Profile.Appearance.FacialHairStyleId, out var facialHairProto)
            )
            {
                if (_markingManager.CanBeApplied(Profile.Species, Profile.Sex, facialHairProto, _prototypeManager))
                {
                    if (_markingManager.MustMatchSkin(Profile.Species, HumanoidVisualLayers.Hair, out var _, _prototypeManager))
                    {
                        facialHairColor = Profile.Appearance.SkinColor;
                    }
                    else
                    {
                        facialHairColor = Profile.Appearance.FacialHairColor;
                    }
                }
            }
            if (facialHairColor != null)
            {
                CMarkings.FacialHairMarking = new (Profile.Appearance.FacialHairStyleId, new List<Color>() { facialHairColor.Value });
            }
            else
            {
                CMarkings.FacialHairMarking = null;
            }
        }

        private void UpdateEyePickers()
        {
            if (Profile == null)
            {
                return;
            }

            CMarkings.CurrentEyeColor = Profile.Appearance.EyeColor;
            _eyesPicker.SetData(Profile.Appearance.EyeColor);
        }

        private void UpdateSaveButton()
        {
            _saveButton.Disabled = Profile is null || !IsDirty;
        }

        private void UpdatePreview()
        {
            if (Profile is null)
                return;

            var humanoid = _entMan.System<HumanoidAppearanceSystem>();
            humanoid.LoadProfile(_previewDummy!.Value, Profile);

            if (ShowClothes.Pressed)
                LobbyCharacterPreviewPanel.GiveDummyJobClothes(_previewDummy!.Value, Profile);
            if (ShowLoadouts.Pressed)
                LobbyCharacterPreviewPanel.GiveDummyLoadoutItems(_previewDummy!.Value, Profile);

            _previewSpriteView.OverrideDirection = (Direction) ((int) _previewRotation % 4 * 2);
        }

        public void UpdateControls()
        {
            if (Profile is null) return;
            UpdateNameEdit();
            UpdateFlavorTextEdit();
            UpdateSexControls();
            UpdateGenderControls();
            UpdateSkinColor();
            UpdateSpecies();
            UpdateClothingControls();
            UpdateBackpackControls();
            UpdateSpawnPriorityControls();
            UpdateAgeEdit();
            UpdateEyePickers();
            UpdateSaveButton();
            UpdateJobPriorities();
            UpdateAntagPreferences();
            UpdateTraitPreferences();
            UpdateLoadouts(_loadoutsShowUnusableButton.Pressed);
            UpdateLoadoutPreferences();
            UpdateMarkings();
            RebuildSpriteView();
            UpdateHairPickers();
            UpdateCMarkingsHair();
            UpdateCMarkingsFacialHair();
            UpdateHeightControls();
            UpdateWidthControls();
            UpdateWeight();

            _preferenceUnavailableButton.SelectId((int) Profile.PreferenceUnavailable);
        }

        protected override void FrameUpdate(FrameEventArgs args)
        {
            base.FrameUpdate(args);

            if (_needUpdatePreview)
            {
                UpdatePreview();
                _needUpdatePreview = false;
            }
        }

        private void UpdateJobPriorities()
        {
            foreach (var prioritySelector in _jobPriorities)
            {
                prioritySelector.UnlockRequirements(); // Nuclear 14
                var jobId = prioritySelector.Proto.ID;

                // Nuclear 14 start
                if (!_requirements.IsAllowed(prioritySelector.Proto, out var reason))
                {
                    prioritySelector.LockRequirements(reason);
                    if (Profile != null)
                    {
                        Profile = Profile.WithJobPriority(jobId, JobPriority.Never);
                    }
                }
				// Nuclear 14 start

                var priority = Profile?.JobPriorities.GetValueOrDefault(jobId, JobPriority.Never) ?? JobPriority.Never;

                prioritySelector.Priority = priority;
            }
        }

        private abstract class RequirementsSelector<T> : Control
        {
            public T Proto { get; }
            public bool Disabled => _lockStripe.Visible;

            protected readonly RadioOptions<int> Options;
            private StripeBack _lockStripe;
            private Label _requirementsLabel;

            protected RequirementsSelector(T proto)
            {
                Proto = proto;

                Options = new RadioOptions<int>(RadioOptionsLayout.Horizontal)
                {
                    FirstButtonStyle = StyleBase.ButtonOpenRight,
                    ButtonStyle = StyleBase.ButtonOpenBoth,
                    LastButtonStyle = StyleBase.ButtonOpenLeft
                };
                //Override default radio option button width
                Options.GenerateItem = GenerateButton;

                Options.OnItemSelected += args => Options.Select(args.Id);

                _requirementsLabel = new Label()
                {
                    Text = Loc.GetString("role-timer-locked"),
                    Visible = true,
                    HorizontalAlignment = HAlignment.Center,
                    StyleClasses = {StyleBase.StyleClassLabelSubText},
                };

                _lockStripe = new StripeBack()
                {
                    Visible = false,
                    HorizontalExpand = true,
                    MouseFilter = MouseFilterMode.Stop,
                    Children =
                    {
                        _requirementsLabel
                    }
                };

                // Setup must be called after
            }

            /// <summary>
            /// Actually adds the controls, must be called in the inheriting class' constructor.
            /// </summary>
            protected void Setup((string, int)[] items, string title, int titleSize, string? description, TextureRect? icon = null)
            {
                foreach (var (text, value) in items)
                {
                    Options.AddItem(Loc.GetString(text), value);
                }

                var titleLabel = new Label()
                {
                    Margin = new Thickness(5f, 0, 5f, 0),
                    Text = title,
                    MinSize = new Vector2(titleSize, 0),
                    MouseFilter = MouseFilterMode.Stop,
                    ToolTip = description
                };

                var container = new BoxContainer
                {
                    Orientation = LayoutOrientation.Horizontal,
                };

                if (icon != null)
                    container.AddChild(icon);
                container.AddChild(titleLabel);
                container.AddChild(Options);
                container.AddChild(_lockStripe);

                AddChild(container);
            }

            public void LockRequirements(FormattedMessage requirements)
            {
                var tooltip = new Tooltip();
                tooltip.SetMessage(requirements);
                _lockStripe.TooltipSupplier = _ => tooltip;
                _lockStripe.Visible = true;
                Options.Visible = false;
            }

            // TODO: Subscribe to roletimers event. I am too lazy to do this RN But I doubt most people will notice fn
            public void UnlockRequirements()
            {
                _lockStripe.Visible = false;
                Options.Visible = true;
            }

            private Button GenerateButton(string text, int value)
            {
                return new Button
                {
                    Text = text,
                    MinWidth = 90
                };
            }
        }

        private sealed class JobPrioritySelector : RequirementsSelector<JobPrototype>
        {
            public JobPriority Priority
            {
                get => (JobPriority) Options.SelectedValue;
                set => Options.SelectByValue((int) value);
            }

            public event Action<JobPriority>? PriorityChanged;

            public JobPrioritySelector(JobPrototype proto, IPrototypeManager protoMan)
                : base(proto)
            {
                Options.OnItemSelected += args => PriorityChanged?.Invoke(Priority);

                var items = new[]
                {
                    ("humanoid-profile-editor-job-priority-high-button", (int) JobPriority.High),
                    ("humanoid-profile-editor-job-priority-medium-button", (int) JobPriority.Medium),
                    ("humanoid-profile-editor-job-priority-low-button", (int) JobPriority.Low),
                    ("humanoid-profile-editor-job-priority-never-button", (int) JobPriority.Never),
                };

                var icon = new TextureRect
                {
                    TextureScale = new Vector2(2, 2),
                    VerticalAlignment = VAlignment.Center
                };
                var jobIcon = protoMan.Index<StatusIconPrototype>(proto.Icon);
                icon.Texture = jobIcon.Icon.Frame0();

                Setup(items, proto.LocalizedName, 200, proto.LocalizedDescription, icon);
            }
        }

        private void UpdateAntagPreferences()
        {
            foreach (var preferenceSelector in _antagPreferences)
            {
                var antagId = preferenceSelector.Proto.ID;
                var preference = Profile?.AntagPreferences.Contains(antagId) ?? false;
                preferenceSelector.Preference = preference;
            }
        }

        private void UpdateTraitPreferences()
        {
            var points = _configurationManager.GetCVar(CCVars.GameTraitsDefaultPoints);
            _traitCount = 0;

            foreach (var preferenceSelector in _traitPreferences)
            {
                var traitId = preferenceSelector.Trait.ID;
                var preference = Profile?.TraitPreferences.Contains(traitId) ?? false;

                preferenceSelector.Preference = preference;

                if (!preference)
                    continue;

                points += preferenceSelector.Trait.Points;
                _traitCount += 1;
            }

            _traitPointsBar.Value = points;
            _traitPointsLabel.Text = Loc.GetString("humanoid-profile-editor-traits-header",
                ("points", points), ("traits", _traitCount),
                ("maxTraits", _configurationManager.GetCVar(CCVars.GameTraitsMax)));
        }

        // Yeah this is mostly just copied from UpdateLoadouts
        // This whole file is bad though and a lot of loadout code came from traits originally
        //TODO Make this file not hell
        private void UpdateTraits(bool showUnusable)
        {
            // Reset trait points so you don't get -14 points or something for no reason
            var points = _configurationManager.GetCVar(CCVars.GameTraitsDefaultPoints);
            _traitPointsLabel.Text = Loc.GetString("humanoid-profile-editor-traits-header",
                ("points", points), ("traits", 0),
                ("maxTraits", _configurationManager.GetCVar(CCVars.GameTraitsMax)));
            _traitPointsBar.MaxValue = points;
            _traitPointsBar.Value = points;

            // Clear current listings
            _traitPreferences.Clear();
            _traitsTabs.DisposeAllChildren();


            // Get the highest priority job to use for trait filtering
            var highJob = _jobPriorities.FirstOrDefault(j => j.Priority == JobPriority.High);

            // Get all trait prototypes
            var enumeratedTraits = _prototypeManager.EnumeratePrototypes<TraitPrototype>().ToList();
            // Get all trait categories
            var categories = _prototypeManager.EnumeratePrototypes<TraitCategoryPrototype>().ToList();

            // If showUnusable is false filter out traits that are unusable based on your current character setup
            var traits = enumeratedTraits.Where(trait =>
                showUnusable || // Ignore everything if this is true
                _characterRequirementsSystem.CheckRequirementsValid(
                    trait,
                    trait.Requirements,
                    highJob?.Proto ?? new JobPrototype(),
                    Profile ?? HumanoidCharacterProfile.DefaultWithSpecies(),
                    new Dictionary<string, TimeSpan>(), //TODO Make this use real playtimes
                    _entMan,
                    _prototypeManager,
                    _configurationManager,
                    out _
                )
            ).ToList();

            // Traits to highlight red when showUnusable is true
            var traitsUnusable = enumeratedTraits.Where(trait =>
                _characterRequirementsSystem.CheckRequirementsValid(
                    trait,
                    trait.Requirements,
                    highJob?.Proto ?? new JobPrototype(),
                    Profile ?? HumanoidCharacterProfile.DefaultWithSpecies(),
                    new Dictionary<string, TimeSpan>(),
                    _entMan,
                    _prototypeManager,
                    _configurationManager,
                    out _
                )
            ).ToList();

            // Every trait not in the traits list
            var otherTraits = enumeratedTraits.Where(trait => !traits.Contains(trait)).ToList();


            if (traits.Count == 0)
            {
                _traitsTab.AddChild(new Label { Text = Loc.GetString("humanoid-profile-editor-traits-no-traits") });
                return;
            }

            // Make Uncategorized category
            var uncategorized = new BoxContainer
            {
                Orientation = LayoutOrientation.Vertical,
                VerticalExpand = true,
                Name = "Uncategorized_0",
                // I hate ScrollContainers
                Children =
                {
                    new ScrollContainer
                    {
                        HScrollEnabled = false,
                        HorizontalExpand = true,
                        VerticalExpand = true,
                        Children =
                        {
                            new BoxContainer
                            {
                                Orientation = LayoutOrientation.Vertical,
                                HorizontalExpand = true,
                                VerticalExpand = true,
                            },
                        },
                    },
                },
            };

            _traitsTabs.AddChild(uncategorized);
            _traitsTabs.SetTabTitle(0, Loc.GetString("trait-category-Uncategorized"));


            // Make categories
            var currentCategory = 1; // 1 because we already made 0 as Uncategorized, I am not not zero-indexing :)
            foreach (var category in categories.OrderBy(c => Loc.GetString($"trait-category-{c.ID}")))
            {
                // Check for existing category
                BoxContainer? match = null;
                foreach (var child in _traitsTabs.Children)
                {
                    if (string.IsNullOrEmpty(child.Name))
                        continue;

                    if (child.Name.Split("_")[0] == category.ID)
                        match = (BoxContainer) child;
                }

                // If there is a category do nothing
                if (match != null)
                    continue;

                // If not, make it
                var box = new BoxContainer
                {
                    Orientation = LayoutOrientation.Vertical,
                    VerticalExpand = true,
                    Name = $"{category.ID}_{currentCategory}",
                    // I hate ScrollContainers
                    Children =
                    {
                        new ScrollContainer
                        {
                            HScrollEnabled = false,
                            HorizontalExpand = true,
                            VerticalExpand = true,
                            Children =
                            {
                                new BoxContainer
                                {
                                    Orientation = LayoutOrientation.Vertical,
                                    HorizontalExpand = true,
                                    VerticalExpand = true,
                                },
                            },
                        },
                    },
                };

                _traitsTabs.AddChild(box);
                _traitsTabs.SetTabTitle(currentCategory, Loc.GetString($"trait-category-{category.ID}"));
                currentCategory++;
            }


            // Fill categories
            foreach (var trait in traits.OrderBy(t => -t.Points).ThenBy(t => Loc.GetString($"trait-name-{t.ID}")))
            {
                var selector = new TraitPreferenceSelector(trait, highJob?.Proto ?? new JobPrototype(),
                    Profile ?? HumanoidCharacterProfile.DefaultWithSpecies(),
                    traitsUnusable.Contains(trait) ? "" : "ButtonColorRed",
                    _entMan, _prototypeManager, _configurationManager, _characterRequirementsSystem);

                // Look for an existing trait category
                BoxContainer? match = null;
                foreach (var child in _traitsTabs.Children)
                {
                    if (string.IsNullOrEmpty(child.Name))
                        continue;

                    // This is fucked up
                    if (child.Name.Split("_")[0] == trait.Category
                        && child.Children.FirstOrDefault()?.Children.FirstOrDefault(g =>
                            g.GetType() == typeof(BoxContainer)) is {} g != default)
                        match = (BoxContainer) g;
                }

                // If there is no category put it in Uncategorized
                if (string.IsNullOrEmpty(match?.Parent?.Parent?.Name)
                    || match.Parent.Parent.Name.Split("_")[0] != trait.Category)
                    uncategorized.AddChild(selector);
                else
                    match.AddChild(selector);


                AddSelector(selector, trait.Points, trait.ID);
            }

            // Add the selected unusable traits to the point counter
            foreach (var trait in otherTraits.OrderBy(t => -t.Points).ThenBy(t => Loc.GetString($"trait-name-{t.ID}")))
            {
                var selector = new TraitPreferenceSelector(trait, highJob?.Proto ?? new JobPrototype(),
                    Profile ?? HumanoidCharacterProfile.DefaultWithSpecies(), "",
                    _entMan, _prototypeManager, _configurationManager, _characterRequirementsSystem);


                AddSelector(selector, trait.Points, trait.ID);
            }


            // Hide Uncategorized tab if it's empty, other tabs already shouldn't exist if they're empty
            _traitsTabs.SetTabVisible(0, uncategorized.Children.Any());

            // Add fake tabs until tab container is happy
            for (var i = _traitsTabs.ChildCount - 1; i < _traitsTabs.CurrentTab; i++)
            {
                _traitsTabs.AddChild(new BoxContainer());
                _traitsTabs.SetTabVisible(i + 1, false);
            }

            UpdateTraitPreferences();
            return;


            void AddSelector(TraitPreferenceSelector selector, int points, string id)
            {
                if (points > 0)
                    _traitPointsBar.MaxValue += points;

                _traitPreferences.Add(selector);
                selector.PreferenceChanged += preference =>
                {
                    // Make sure they have enough trait points
                    preference = preference ? CheckPoints(points, preference) : CheckPoints(-points, preference);
                    // Don't allow having too many traits
                    preference = preference && _traitCount + 1 <= _configurationManager.GetCVar(CCVars.GameTraitsMax);

                    // Update Preferences
                    Profile = Profile?.WithTraitPreference(id, preference);
                    IsDirty = true;
                    UpdateTraitPreferences();
                    UpdateTraits(_traitsShowUnusableButton.Pressed);
                    UpdateLoadouts(_loadoutsShowUnusableButton.Pressed);
                };
            }

            bool CheckPoints(int points, bool preference)
            {
                var temp = _traitPointsBar.Value + points;
                return preference ? !(temp < 0) : temp < 0;
            }
        }

        private void UpdateLoadoutPreferences()
        {
            var points = _configurationManager.GetCVar(CCVars.GameLoadoutsPoints);
            _loadoutPointsBar.Value = points;
            _loadoutPointsLabel.Text = Loc.GetString("humanoid-profile-editor-loadouts-points-label", ("points", points), ("max", points));

            foreach (var preferenceSelector in _loadoutPreferences)
            {
                var loadoutId = preferenceSelector.Loadout.ID;
                var preference = Profile?.LoadoutPreferences.Contains(loadoutId) ?? false;

                preferenceSelector.Preference = preference;

                if (preference)
                {
                    points -= preferenceSelector.Loadout.Cost;
                    _loadoutPointsBar.Value = points;
                    _loadoutPointsLabel.Text = Loc.GetString("humanoid-profile-editor-loadouts-points-label", ("points", points), ("max", _loadoutPointsBar.MaxValue));
                }
            }
        }

        private void UpdateLoadouts(bool showUnusable)
        {
            // Reset loadout points so you don't get -14 points or something for no reason
            var points = _configurationManager.GetCVar(CCVars.GameLoadoutsPoints);
            _loadoutPointsLabel.Text = Loc.GetString("humanoid-profile-editor-loadouts-points-label", ("points", points), ("max", points));
            _loadoutPointsBar.MaxValue = points;
            _loadoutPointsBar.Value = points;

            // Clear current listings
            _loadoutPreferences.Clear();
            _loadoutsTabs.DisposeAllChildren();


            // Get the highest priority job to use for loadout filtering
            var highJob = _jobPriorities.FirstOrDefault(j => j.Priority == JobPriority.High);

            // Get all loadout prototypes
            var enumeratedLoadouts = _prototypeManager.EnumeratePrototypes<LoadoutPrototype>().ToList();
            // Get all loadout categories
            var categories = _prototypeManager.EnumeratePrototypes<LoadoutCategoryPrototype>().ToList();

            // If showUnusable is false filter out loadouts that are unusable based on your current character setup
            var loadouts = enumeratedLoadouts.Where(loadout =>
                showUnusable || // Ignore everything if this is true
                _characterRequirementsSystem.CheckRequirementsValid(
                    loadout,
                    loadout.Requirements,
                    highJob?.Proto ?? new JobPrototype(),
                    Profile ?? HumanoidCharacterProfile.DefaultWithSpecies(),
                    new Dictionary<string, TimeSpan>(), //TODO Make this use real playtimes
                    _entMan,
                    _prototypeManager,
                    _configurationManager,
                    out _
                )
            ).ToList();

            // Loadouts to highlight red when showUnusable is true
            var loadoutsUnusable = enumeratedLoadouts.Where(loadout =>
                _characterRequirementsSystem.CheckRequirementsValid(
                    loadout,
                    loadout.Requirements,
                    highJob?.Proto ?? new JobPrototype(),
                    Profile ?? HumanoidCharacterProfile.DefaultWithSpecies(),
                    new Dictionary<string, TimeSpan>(),
                    _entMan,
                    _prototypeManager,
                    _configurationManager,
                    out _
                )
            ).ToList();

            // Every loadout not in the loadouts list
            var otherLoadouts = enumeratedLoadouts.Where(loadout => !loadouts.Contains(loadout)).ToList();


            if (loadouts.Count == 0)
            {
                _loadoutsTab.AddChild(new Label { Text = Loc.GetString("humanoid-profile-editor-loadouts-no-loadouts") });
                return;
            }

            // Make Uncategorized category
            var uncategorized = new BoxContainer
            {
                Orientation = LayoutOrientation.Vertical,
                VerticalExpand = true,
                Name = "Uncategorized_0",
                // I hate ScrollContainers
                Children =
                {
                    new ScrollContainer
                    {
                        HScrollEnabled = false,
                        HorizontalExpand = true,
                        VerticalExpand = true,
                        Children =
                        {
                            new BoxContainer
                            {
                                Orientation = LayoutOrientation.Vertical,
                                HorizontalExpand = true,
                                VerticalExpand = true,
                            },
                        },
                    },
                },
            };

            _loadoutsTabs.AddChild(uncategorized);
            _loadoutsTabs.SetTabTitle(0, Loc.GetString("loadout-category-Uncategorized"));


            // Make categories
            var currentCategory = 1; // 1 because we already made 0 as Uncategorized, I am not not zero-indexing :)
            foreach (var category in categories.OrderBy(c => Loc.GetString($"loadout-category-{c.ID}")))
            {
                // Check for existing category
                BoxContainer? match = null;
                foreach (var child in _loadoutsTabs.Children)
                {
                    if (string.IsNullOrEmpty(child.Name))
                        continue;

                    // This is fucked up
                    if (child.Name.Split("_")[0] == category.ID
                        && child.Children.FirstOrDefault()?.Children.FirstOrDefault(g =>
                            g.GetType() == typeof(BoxContainer)) is {} g != default)
                        match = (BoxContainer) g;
                }

                // If there is a category do nothing
                if (match != null)
                    continue;

                // If not, make it
                var box = new BoxContainer
                {
                    Orientation = LayoutOrientation.Vertical,
                    VerticalExpand = true,
                    Name = $"{category.ID}_{currentCategory}",
                    // I hate ScrollContainers
                    Children =
                    {
                        new ScrollContainer
                        {
                            HScrollEnabled = false,
                            HorizontalExpand = true,
                            VerticalExpand = true,
                            Children =
                            {
                                new BoxContainer
                                {
                                    Orientation = LayoutOrientation.Vertical,
                                    HorizontalExpand = true,
                                    VerticalExpand = true,
                                },
                            },
                        },
                    },
                };

                _loadoutsTabs.AddChild(box);
                _loadoutsTabs.SetTabTitle(currentCategory, Loc.GetString($"loadout-category-{category.ID}"));
                currentCategory++;
            }


            // Fill categories
            foreach (var loadout in loadouts.OrderBy(l => l.Cost).ThenBy(l => Loc.GetString($"loadout-{l.ID}-name")))
            {
                var selector = new LoadoutPreferenceSelector(loadout, highJob?.Proto ?? new JobPrototype(),
                    Profile ?? HumanoidCharacterProfile.DefaultWithSpecies(),
                    loadoutsUnusable.Contains(loadout) ? "" : "ButtonColorRed",
                    _entMan, _prototypeManager, _configurationManager, _characterRequirementsSystem);

                // Look for an existing loadout category
                BoxContainer? match = null;
                foreach (var child in _loadoutsTabs.Children)
                {
                    if (string.IsNullOrEmpty(child.Name))
                        continue;

                    if (child.Name.Split("_")[0] == loadout.Category)
                        match = (BoxContainer) child.Children.First().Children.First();
                }

                // If there is no category put it in Uncategorized
                if (string.IsNullOrEmpty(match?.Parent?.Parent?.Name)
                    || match.Parent.Parent.Name.Split("_")[0] != loadout.Category)
                    uncategorized.AddChild(selector);
                else
                    match.AddChild(selector);


                AddSelector(selector, loadout.Cost, loadout.ID);
            }

            // Add the selected unusable loadouts to the point counter
            foreach (var loadout in otherLoadouts.OrderBy(l => l.Cost).ThenBy(l => Loc.GetString($"loadout-{l.ID}-name")))
            {
                var selector = new LoadoutPreferenceSelector(loadout, highJob?.Proto ?? new JobPrototype(),
                    Profile ?? HumanoidCharacterProfile.DefaultWithSpecies(), "",
                    _entMan, _prototypeManager, _configurationManager, _characterRequirementsSystem);


                AddSelector(selector, loadout.Cost, loadout.ID);
            }


            // Hide Uncategorized tab if it's empty, other tabs already shouldn't exist if they're empty
            _loadoutsTabs.SetTabVisible(0, uncategorized.Children.Any());

            // Add fake tabs until tab container is happy
            for (var i = _loadoutsTabs.ChildCount - 1; i < _loadoutsTabs.CurrentTab; i++)
            {
                _loadoutsTabs.AddChild(new BoxContainer());
                _loadoutsTabs.SetTabVisible(i + 1, false);
            }

            UpdateLoadoutPreferences();
            return;


            void AddSelector(LoadoutPreferenceSelector selector, int points, string id)
            {
                _loadoutPreferences.Add(selector);
                selector.PreferenceChanged += preference =>
                {
                    // Make sure they have enough loadout points
                    preference = preference ? CheckPoints(-points, preference) : CheckPoints(points, preference);

                    // Update Preferences
                    Profile = Profile?.WithLoadoutPreference(id, preference);
                    IsDirty = true;
                    UpdateLoadoutPreferences();
                    UpdateLoadouts(_loadoutsShowUnusableButton.Pressed);
                    UpdateTraits(_traitsShowUnusableButton.Pressed);
                };
            }

            bool CheckPoints(int points, bool preference)
            {
                var temp = _loadoutPointsBar.Value + points;
                return preference ? !(temp < 0) : temp < 0;
            }
        }


        private sealed class AntagPreferenceSelector : RequirementsSelector<AntagPrototype>
        {
            // 0 is yes and 1 is no
            public bool Preference
            {
                get => Options.SelectedValue == 0;
                set => Options.Select((value && !Disabled) ? 0 : 1);
            }

            public event Action<bool>? PreferenceChanged;

            public AntagPreferenceSelector(AntagPrototype proto)
                : base(proto)
            {
                Options.OnItemSelected += args => PreferenceChanged?.Invoke(Preference);

                var items = new[]
                {
                    ("humanoid-profile-editor-antag-preference-yes-button", 0),
                    ("humanoid-profile-editor-antag-preference-no-button", 1)
                };
                var title = Loc.GetString(proto.Name);
                var description = Loc.GetString(proto.Objective);
                Setup(items, title, 250, description);

                // immediately lock requirements if they arent met.
                // another function checks Disabled after creating the selector so this has to be done now
                var requirements = IoCManager.Resolve<JobRequirementsManager>();
                if (proto.Requirements != null && !requirements.CheckRoleTime(proto.Requirements, out var reason))
                {
                    LockRequirements(reason);
                }
            }
        }

        private sealed class TraitPreferenceSelector : Control
        {
            public TraitPrototype Trait { get; }
            private readonly Button _button;

            public bool Preference
            {
                get => _button.Pressed;
                set => _button.Pressed = value;
            }

            public event Action<bool>? PreferenceChanged;

            public TraitPreferenceSelector(TraitPrototype trait, JobPrototype highJob,
                HumanoidCharacterProfile profile, string style, IEntityManager entityManager, IPrototypeManager prototypeManager,
                IConfigurationManager configManager, CharacterRequirementsSystem characterRequirementsSystem)
            {
                Trait = trait;

                // Create a checkbox to get the loadout
                _button = new Button
                {
                    VerticalAlignment = VAlignment.Center,
                    ToggleMode = true,
                    StyleClasses = { StyleBase.ButtonOpenLeft },
                    Children =
                    {
                        new BoxContainer
                        {
                            Children =
                            {
                                new Label
                                {
                                    Text = trait.Points.ToString(),
                                    StyleClasses = { StyleBase.StyleClassLabelHeading },
                                    MinWidth = 32,
                                    MaxWidth = 32,
                                    ClipText = true,
                                    Margin = new Thickness(0, 0, 8, 0),
                                },
                                new Label { Text = Loc.GetString($"trait-name-{trait.ID}") },
                            },
                        },
                    },
                };
                _button.OnToggled += OnButtonToggled;
                _button.AddStyleClass(style);

                var tooltip = new StringBuilder();
                // Add the loadout description to the tooltip if there is one
                var desc = Loc.GetString($"trait-description-{trait.ID}");
                if (!string.IsNullOrEmpty(desc) && desc != $"trait-description-{trait.ID}")
                    tooltip.Append(desc);


                // Get requirement reasons
                characterRequirementsSystem.CheckRequirementsValid(trait, trait.Requirements, highJob, profile,
                    new Dictionary<string, TimeSpan>(),
                    entityManager, prototypeManager, configManager,
                    out var reasons);

                // Add requirement reasons to the tooltip
                foreach (var reason in reasons)
                    tooltip.Append($"\n{reason.ToMarkup()}");

                // Combine the tooltip and format it in the checkbox supplier
                if (tooltip.Length > 0)
                {
                    var formattedTooltip = new Tooltip();
                    formattedTooltip.SetMessage(FormattedMessage.FromMarkupPermissive(tooltip.ToString()));
                    _button.TooltipSupplier = _ => formattedTooltip;
                }


                // Add the loadout preview and the checkbox to the control
                AddChild(new BoxContainer
                {
                    Orientation = LayoutOrientation.Horizontal,
                    Children = { _button },
                });
            }

            private void OnButtonToggled(BaseButton.ButtonToggledEventArgs args)
            {
                PreferenceChanged?.Invoke(Preference);
            }
        }

        private sealed class LoadoutPreferenceSelector : Control
        {
            public LoadoutPrototype Loadout { get; }
            private readonly Button _button;

            public bool Preference
            {
                get => _button.Pressed;
                set => _button.Pressed = value;
            }

            public event Action<bool>? PreferenceChanged;

            public LoadoutPreferenceSelector(LoadoutPrototype loadout, JobPrototype highJob,
                HumanoidCharacterProfile profile, string style, IEntityManager entityManager, IPrototypeManager prototypeManager,
                IConfigurationManager configManager, CharacterRequirementsSystem characterRequirementsSystem)
            {
                Loadout = loadout;

                // Display the first item in the loadout as a preview
                // TODO: Maybe allow custom icons to be specified in the prototype?
                var dummyLoadoutItem = entityManager.SpawnEntity(loadout.Items.First(), MapCoordinates.Nullspace);

                // Create a sprite preview of the loadout item
                var previewLoadout = new SpriteView
                {
                    Scale = new Vector2(1, 1),
                    OverrideDirection = Direction.South,
                    VerticalAlignment = VAlignment.Center,
                    SizeFlagsStretchRatio = 1,
                };
                previewLoadout.SetEntity(dummyLoadoutItem);


                // Create a checkbox to get the loadout
                _button = new Button
                {
                    ToggleMode = true,
                    StyleClasses = { StyleBase.ButtonOpenLeft },
                    Children =
                    {
                        new BoxContainer
                        {
                            Children =
                            {
                                new Label
                                {
                                    Text = loadout.Cost.ToString(),
                                    StyleClasses = { StyleBase.StyleClassLabelHeading },
                                    MinWidth = 32,
                                    MaxWidth = 32,
                                    ClipText = true,
                                    Margin = new Thickness(0, 0, 8, 0),
                                },
                                new Label
                                {
                                    Text = Loc.GetString($"loadout-name-{loadout.ID}") == $"loadout-name-{loadout.ID}"
                                        ? entityManager.GetComponent<MetaDataComponent>(dummyLoadoutItem).EntityName
                                        : Loc.GetString($"loadout-name-{loadout.ID}"),
                                },
                            },
                        },
                    },
                };
                _button.OnToggled += OnButtonToggled;
                _button.AddStyleClass(style);

                var tooltip = new StringBuilder();
                // Add the loadout description to the tooltip if there is one
                var desc = !Loc.TryGetString($"loadout-description-{loadout.ID}", out var description)
                    ? entityManager.GetComponent<MetaDataComponent>(dummyLoadoutItem).EntityDescription
                    : description;
                if (!string.IsNullOrEmpty(desc))
                    tooltip.Append($"{Loc.GetString(desc)}");


                // Get requirement reasons
                characterRequirementsSystem.CheckRequirementsValid(loadout, loadout.Requirements, highJob, profile,
                    new Dictionary<string, TimeSpan>(),
                    entityManager, prototypeManager, configManager,
                    out var reasons);

                // Add requirement reasons to the tooltip
                foreach (var reason in reasons)
                    tooltip.Append($"\n{reason.ToMarkup()}");

                // Combine the tooltip and format it in the checkbox supplier
                if (tooltip.Length > 0)
                {
                    var formattedTooltip = new Tooltip();
                    formattedTooltip.SetMessage(FormattedMessage.FromMarkupPermissive(tooltip.ToString()));
                    _button.TooltipSupplier = _ => formattedTooltip;
                }


                // Add the loadout preview and the checkbox to the control
                AddChild(new BoxContainer
                {
                    Orientation = LayoutOrientation.Horizontal,
                    Children = { previewLoadout, _button },
                });
            }

            private void OnButtonToggled(BaseButton.ButtonToggledEventArgs args)
            {
                PreferenceChanged?.Invoke(Preference);
            }
        }
    }
}
