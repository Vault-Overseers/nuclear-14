using Content.Shared.CartridgeLoader;
using Content.Client.PDA;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Utility;

namespace Content.Client._N14.Terminal;

[GenerateTypedNameReferences]
public sealed partial class TerminalMenu : TerminalWindow
{
    public const int ProgramListView = 0;
    public const int ProgramContentView = 1;

    private int _currentView;

    public event Action<EntityUid>? OnProgramItemPressed;
    public event Action<EntityUid>? OnUninstallButtonPressed;
    public event Action<EntityUid>? OnInstallButtonPressed;

    public TerminalMenu()
    {
        RobustXamlLoader.Load(this);

        ApplyTerminalTheme();

        ViewContainer.OnChildAdded += c => c.Visible = false;

        HomeButton.IconTexture = new SpriteSpecifier.Texture(new("/Textures/Interface/home.png"));
        ProgramCloseButton.IconTexture = new SpriteSpecifier.Texture(new("/Textures/Interface/Nano/cross.svg.png"));

        HomeButton.OnPressed += _ => ToProgramList();
        ProgramListButton.OnPressed += _ =>
        {
            HomeButton.IsCurrent = false;
            ProgramListButton.IsCurrent = true;
            ProgramTitle.IsCurrent = false;
            ChangeView(ProgramListView);
        };
        ProgramTitle.OnPressed += _ =>
        {
            HomeButton.IsCurrent = false;
            ProgramListButton.IsCurrent = false;
            ProgramTitle.IsCurrent = true;
            ChangeView(ProgramContentView);
        };
        ProgramCloseButton.OnPressed += _ =>
        {
            HideProgramHeader();
            ToProgramList();
        };

        HideAllViews();
        ToProgramList();
    }

    public void UpdateAvailablePrograms(List<(EntityUid, CartridgeComponent)> programs)
    {
        ProgramList.RemoveAllChildren();
        if (programs.Count == 0)
        {
            ProgramList.AddChild(new Label
            {
                Text = Loc.GetString("comp-pda-io-no-programs-available"),
                HorizontalAlignment = HAlignment.Center,
                VerticalAlignment = VAlignment.Center,
                VerticalExpand = true
            });
            return;
        }

        var row = CreateProgramListRow();
        var itemCount = 1;
        ProgramList.AddChild(row);

        foreach (var (uid, component) in programs)
        {
            if (itemCount % 2 != 0)
            {
                row = CreateProgramListRow();
                ProgramList.AddChild(row);
            }

            var item = new PdaProgramItem();
            if (component.Icon is not null)
                item.Icon.SetFromSpriteSpecifier(component.Icon);

            item.OnPressed += _ => OnProgramItemPressed?.Invoke(uid);

            switch (component.InstallationStatus)
            {
                case InstallationStatus.Cartridge:
                    item.InstallButton.Visible = true;
                    item.InstallButton.Text = Loc.GetString("cartridge-bound-user-interface-install-button");
                    item.InstallButton.OnPressed += _ => OnInstallButtonPressed?.Invoke(uid);
                    break;
                case InstallationStatus.Installed:
                    item.InstallButton.Visible = true;
                    item.InstallButton.Text = Loc.GetString("cartridge-bound-user-interface-uninstall-button");
                    item.InstallButton.OnPressed += _ => OnUninstallButtonPressed?.Invoke(uid);
                    break;
            }

            item.ProgramName.Text = Loc.GetString(component.ProgramName);
            item.SetHeight = 20;
            row.AddChild(item);

            itemCount++;
        }

        if (itemCount % 2 == 0)
            row.AddChild(new Control { HorizontalExpand = true });
    }

    public void ToProgramList()
    {
        HomeButton.IsCurrent = true;
        ProgramListButton.IsCurrent = false;
        ProgramTitle.IsCurrent = false;
        ChangeView(ProgramListView);
    }

    public void HideProgramHeader()
    {
        ProgramTitle.IsCurrent = false;
        ProgramTitle.Visible = false;
        ProgramCloseButton.Visible = false;
        ProgramListButton.Visible = true;
    }

    public void ToProgramView(string title)
    {
        HomeButton.IsCurrent = false;
        ProgramListButton.IsCurrent = false;
        ProgramTitle.IsCurrent = true;
        ProgramTitle.Visible = true;
        ProgramCloseButton.Visible = true;
        ProgramListButton.Visible = false;
        ProgramTitle.LabelText = title;
        ChangeView(ProgramContentView);
    }

    public void ChangeView(int view)
    {
        if (ViewContainer.ChildCount <= view)
            return;

        ViewContainer.GetChild(_currentView).Visible = false;
        ViewContainer.GetChild(view).Visible = true;
        _currentView = view;
    }

    private static BoxContainer CreateProgramListRow()
    {
        return new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Horizontal,
            HorizontalExpand = true
        };
    }

    private void HideAllViews()
    {
        foreach (var view in ViewContainer.Children)
        {
            view.Visible = false;
        }
    }

    private void ApplyTerminalTheme()
    {
        const string fg = "#00ff00";
        const string bg = "#001100";

        HomeButton.ActiveFgColor = fg;
        HomeButton.InactiveFgColor = fg;
        HomeButton.ActiveBgColor = bg;
        HomeButton.InactiveBgColor = bg;

        ProgramListButton.ActiveFgColor = fg;
        ProgramListButton.InactiveFgColor = fg;
        ProgramListButton.ActiveBgColor = bg;
        ProgramListButton.InactiveBgColor = bg;

        ProgramTitle.ActiveFgColor = fg;
        ProgramTitle.InactiveFgColor = fg;
        ProgramTitle.ActiveBgColor = bg;
        ProgramTitle.InactiveBgColor = bg;

        ProgramCloseButton.ActiveFgColor = fg;
        ProgramCloseButton.InactiveFgColor = fg;
        ProgramCloseButton.ActiveBgColor = bg;
        ProgramCloseButton.InactiveBgColor = bg;

        ProgramTitle.StyleClasses.Add("terminal");
    }
}
